package jdbcgui;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;

public class UpdateDeleteStudent extends javax.swing.JFrame {

    /**
     * Creates new form UpdateDeleteStudent
     */
    myDBCon dbCon;

    ResultSet rs;
    LoginUser luser;

    public UpdateDeleteStudent(LoginUser user) {
        initComponents();

        // center form in screen 
        this.setLocationRelativeTo(null);
        luser = user;

        // set all error labels to invisible
        clearErrorLabels();

        // connect to db and get user data and populate form fields
        dbCon = new myDBCon();
        getNewData();
        
        if (user.type == 1){
            txtUserID.setEditable(false);
            txtFName.setEditable(false);
            txtLName.setEditable(false);
            txtMajor.setEditable(false);
            txtPassword.setEditable(false);
            txtEmail.setEditable(false);
            txtConfirmPassword.setEditable(false);
            txtStanding.setEditable(false);
            txtUsername.setEditable(false);
            
            jLabel1.setText("View Students");
            btnDeleteUser.setEnabled(false);
            btnUpdateUser.setEnabled(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnUpdateUser = new javax.swing.JButton();
        btnDeleteUser = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnPrevious = new javax.swing.JButton();
        txtUsername = new javax.swing.JTextField();
        lblUsernameError = new javax.swing.JLabel();
        txtFName = new javax.swing.JTextField();
        lblConfirmPasswordError = new javax.swing.JLabel();
        lblPasswordError = new javax.swing.JLabel();
        lblFNameError = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        txtConfirmPassword = new javax.swing.JPasswordField();
        lblUserIDError = new javax.swing.JLabel();
        txtUserID = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtLName = new javax.swing.JTextField();
        lblLNameError = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        lblEmailError = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtStanding = new javax.swing.JTextField();
        lblMajorError = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtMajor = new javax.swing.JTextField();
        lblStandingError = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Update Login Student");

        btnUpdateUser.setFont(new java.awt.Font("Forte", 0, 24)); // NOI18N
        btnUpdateUser.setText("Update");
        btnUpdateUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateUserActionPerformed(evt);
            }
        });

        btnDeleteUser.setFont(new java.awt.Font("Forte", 0, 24)); // NOI18N
        btnDeleteUser.setText("Delete");
        btnDeleteUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteUserActionPerformed(evt);
            }
        });

        btnNext.setFont(new java.awt.Font("Forte", 0, 24)); // NOI18N
        btnNext.setText("Next >>");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnPrevious.setFont(new java.awt.Font("Forte", 0, 24)); // NOI18N
        btnPrevious.setText("<< Previous");
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });

        txtUsername.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        lblUsernameError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblUsernameError.setForeground(new java.awt.Color(255, 0, 0));
        lblUsernameError.setText("error label");

        txtFName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        lblConfirmPasswordError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblConfirmPasswordError.setForeground(new java.awt.Color(255, 0, 0));
        lblConfirmPasswordError.setText("error label");

        lblPasswordError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblPasswordError.setForeground(new java.awt.Color(255, 0, 0));
        lblPasswordError.setText("error label");

        lblFNameError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblFNameError.setForeground(new java.awt.Color(255, 0, 0));
        lblFNameError.setText("error label");

        txtPassword.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        txtConfirmPassword.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        lblUserIDError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblUserIDError.setForeground(new java.awt.Color(255, 0, 0));
        lblUserIDError.setText("error label");

        txtUserID.setEditable(false);
        txtUserID.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel9.setText("UserID:");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel10.setText("LName:");

        txtLName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        lblLNameError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblLNameError.setForeground(new java.awt.Color(255, 0, 0));
        lblLNameError.setText("error label");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("Email:");

        txtEmail.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Username:");

        lblEmailError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblEmailError.setForeground(new java.awt.Color(255, 0, 0));
        lblEmailError.setText("error label");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Password:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("Confirm Password:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel8.setText("FName:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText("Standing:");

        txtStanding.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        lblMajorError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblMajorError.setForeground(new java.awt.Color(255, 0, 0));
        lblMajorError.setText("error label");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setText("Major:");

        txtMajor.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        lblStandingError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblStandingError.setForeground(new java.awt.Color(255, 0, 0));
        lblStandingError.setText("error label");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(112, 112, 112)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtStanding, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(13, 13, 13))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(txtMajor, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblMajorError, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblStandingError, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtUserID, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel8)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel10)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel5))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(txtFName, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                                                    .addComponent(txtLName)
                                                    .addComponent(txtPassword)
                                                    .addComponent(txtUsername))
                                                .addGap(17, 17, 17))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                    .addComponent(txtConfirmPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                                                    .addComponent(txtEmail))
                                                .addGap(18, 18, 18)))))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(lblEmailError, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblConfirmPasswordError, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblPasswordError, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblLNameError, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblFNameError, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblUsernameError, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblUserIDError, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(btnPrevious)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUpdateUser)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDeleteUser)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNext)))
                .addContainerGap(77, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtUserID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblUserIDError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblUsernameError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtFName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblFNameError)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(lblLNameError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPasswordError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtConfirmPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(lblConfirmPasswordError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5))
                    .addComponent(lblEmailError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtMajor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblMajorError))
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(txtStanding, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblStandingError))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPrevious)
                    .addComponent(btnUpdateUser)
                    .addComponent(btnDeleteUser)
                    .addComponent(btnNext))
                .addGap(34, 34, 34))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    void getNewData() {
        // get all user data and populate fields 
        try {
            
            // populate rest of fields
            rs = dbCon.executeStatement("SELECT * FROM \"USER\" JOIN student ON userid = studid ORDER BY userid ASC ");
            rs.beforeFirst();
            rs.first();
            populateFields();
        } catch (SQLException e) {
            javax.swing.JLabel label = new javax.swing.JLabel("SQL Error.");
            label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void populateFields() {
        // populate fields with the current user details 
        try {
            txtUserID.setText(rs.getString("userid"));
            txtUsername.setText(rs.getString("username"));
            txtPassword.setText(rs.getString("password"));
            txtFName.setText(rs.getString("fname"));
            txtLName.setText(rs.getString("lname"));
            txtEmail.setText(rs.getString("email"));
            txtMajor.setText(rs.getString("major"));
            txtStanding.setText(rs.getString("standing"));

            EnableDisableButtons();
        } catch (SQLException ex) {
            //Logger.getLogger(UpdateDeleteEmployee.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void EnableDisableButtons() {
        // enable/disable Previous/Next buttons
        try {
            if (rs.isFirst()) {
                btnPrevious.setEnabled(false);
            } else {
                btnPrevious.setEnabled(true);
            }
            if (rs.isLast()) {
                btnNext.setEnabled(false);
            } else {
                btnNext.setEnabled(true);
            }
        } catch (SQLException ex) {
            //Logger.getLogger(UpdateDeleteEmployee.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void clearErrorLabels() {
        // erase error label text and set visibility to false 
        lblUserIDError.setText("");
        lblFNameError.setText("");
        lblLNameError.setText("");
        lblMajorError.setText("");
        lblPasswordError.setText("");
        lblEmailError.setText("");
        lblConfirmPasswordError.setText("");
        lblStandingError.setText("");
        lblUsernameError.setText("");
    }

    public boolean isInteger(String s) {
        try {
            Integer.parseInt(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }

    boolean isValidData() {
        // check validity of all values entered 
        boolean result = true;
        if (txtUserID.getText().trim().isEmpty() || !isInteger(txtUserID.getText().trim())) {
            if (txtUserID.getText().trim().isEmpty()) {
                lblUserIDError.setText("Required.");
            } else if (!isInteger(txtUserID.getText().trim())) {
                lblUserIDError.setText("Must be an integer.");
            }

            lblUserIDError.setVisible(true);
            result = false;
        }

        if (txtFName.getText().trim().isEmpty() || (txtFName.getText().trim().length() > 30)) {
            if (txtFName.getText().trim().isEmpty()) {
                lblFNameError.setText("Required.");
            } else if ((txtFName.getText().trim().length() > 30)) {
                lblFNameError.setText("Must be < 30 chars.");
            }
            lblFNameError.setVisible(true);
            result = false;
        }

        if (txtLName.getText().trim().isEmpty() || (txtLName.getText().trim().length() > 30)) {
            if (txtLName.getText().trim().isEmpty()) {
                lblLNameError.setText("Required.");
            } else if ((txtLName.getText().trim().length() > 30)) {
                lblLNameError.setText("Must be < 30 chars.");
            }

            lblLNameError.setVisible(true);
            result = false;
        }

        if (txtStanding.getText().trim().isEmpty() || (txtStanding.getText().trim().length() > 20)) {
            if (txtStanding.getText().trim().isEmpty()) {
                lblMajorError.setText("Required.");
            } else if ((txtStanding.getText().trim().length() > 20)) {
                lblMajorError.setText("Must be < 20 chars.");
            }

            lblMajorError.setVisible(true);
            result = false;
        }

        if (txtMajor.getText().trim().isEmpty() || (txtMajor.getText().trim().length() > 20)) {
            if (txtMajor.getText().trim().isEmpty()) {
                lblStandingError.setText("Required.");
            } else if ((txtMajor.getText().trim().length() > 20)) {
                lblStandingError.setText("Must be < 20 chars.");
            }

            lblStandingError.setVisible(true);
            result = false;
        }

        if (txtUsername.getText().trim().isEmpty() || (txtUsername.getText().trim().length() > 20)) {
            if (txtUsername.getText().trim().isEmpty()) {
                lblUsernameError.setText("Required.");
            } else if ((txtUsername.getText().trim().length() > 20)) {
                lblUsernameError.setText("Must be < 20 chars.");
            }

            lblUsernameError.setVisible(true);
            result = false;
        }

        if (txtEmail.getText().trim().isEmpty() || (txtEmail.getText().trim().length() > 20)) {
            if (txtEmail.getText().trim().isEmpty()) {
                lblEmailError.setText("Required.");
            } else if ((txtEmail.getText().trim().length() > 20)) {
                lblEmailError.setText("Must be < 20 chars.");
            }

            lblEmailError.setVisible(true);
            result = false;
        }

        if (txtPassword.getText().trim().isEmpty() || (txtPassword.getText().trim().length() > 10)) {
            if (txtPassword.getText().trim().isEmpty()) {
                lblPasswordError.setText("Required.");
            } else if ((txtPassword.getText().trim().length() > 10)) {
                lblPasswordError.setText("Must be < 10 chars.");
            }

            lblPasswordError.setVisible(true);
            result = false;
        }

        if (!txtConfirmPassword.getText().trim().equals(txtPassword.getText().trim())) {
            lblConfirmPasswordError.setText("Passwords do not match.");
            lblConfirmPasswordError.setVisible(true);
            result = false;
        }

        if (txtConfirmPassword.getText().trim().isEmpty() || (txtConfirmPassword.getText().trim().length() > 25)) {
            if (txtConfirmPassword.getText().trim().isEmpty()) {
                lblConfirmPasswordError.setText("Required.");
            } else if ((txtConfirmPassword.getText().trim().length() > 25)) {
                lblConfirmPasswordError.setText("Must be < 25 chars.");
            }

            lblConfirmPasswordError.setVisible(true);
            result = false;
        }

        return result;
    }

    void updateLogs(String action) {
        try {
            String prepSQL = "INSERT INTO log VALUES (?,?,?,SYSTIMESTAMP)";
            PreparedStatement preparedStatement = dbCon.prepareStatement(prepSQL);
            preparedStatement.setInt(1, luser.userid);
            preparedStatement.setString(2, luser.username);
            preparedStatement.setString(3, action);
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error inserting the logs.");
        }
    }


    private void btnUpdateUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateUserActionPerformed
        // TODO add your handling code here:
        // verify input data
        // verify that new user does not currently exist 
        try {

            if (isValidData()) {

                if (JOptionPane.showConfirmDialog(null, "Are you sure you want to update?", "CONFIRM",
                        JOptionPane.YES_NO_OPTION) != JOptionPane.YES_NO_OPTION) {
                    return;
                }

                String prepSQL = "UPDATE \"USER\" SET username = ?, fname = ?, lname = ?, password = ?, email = ? WHERE userid = ?";
                PreparedStatement prepStmt = dbCon.prepareStatement(prepSQL);

                // Set values for the update operation
                prepStmt.setString(1, txtUsername.getText().trim());
                prepStmt.setString(2, txtFName.getText().trim());
                prepStmt.setString(3, txtLName.getText().trim());
                prepStmt.setString(4, txtPassword.getText().trim());
                prepStmt.setString(5, txtEmail.getText().trim());
                prepStmt.setInt(6, Integer.parseInt(txtUserID.getText().trim()));

                String prepSQL2 = "UPDATE student SET major = ?, standing = ? WHERE studid = ?";

                PreparedStatement prepStmt2 = dbCon.prepareStatement(prepSQL2);

                prepStmt2.setString(1, txtMajor.getText().trim());
                prepStmt2.setString(2, txtStanding.getText().trim());
                prepStmt2.setInt(3, Integer.parseInt(txtUserID.getText().trim()));

                int result = prepStmt.executeUpdate();
                int result2 = prepStmt2.executeUpdate();

                if (result > 0 && result2 > 0) {

                    clearErrorLabels();

                    String action = "Updated: Student with id " + txtUserID.getText().trim();
                    updateLogs(action);

                    javax.swing.JLabel label = new javax.swing.JLabel("Student " + txtUserID.getText() + " updated successfully.");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);

                    getNewData();
                }
            } else {
                javax.swing.JLabel label = new javax.swing.JLabel("Please fix validation errors...");
                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
            }

        } catch (SQLException e) {

            JOptionPane.showMessageDialog(null, "Error updating User." + e.getMessage());
        }

    }//GEN-LAST:event_btnUpdateUserActionPerformed

    private void btnDeleteUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteUserActionPerformed
        // TODO add your handling code here:
        try {

            String stmtSQL = "SELECT studid FROM register WHERE studid = " + rs.getString("userid");
            ResultSet rs2 = dbCon.executeStatement(stmtSQL);
            if (rs2.isBeforeFirst()) {
                javax.swing.JLabel label = new javax.swing.JLabel("Student is registered in an event.");
                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);

                rs2.close();
                return;
            }

            if (JOptionPane.showConfirmDialog(null, "Are you sure you want to delete?", "CONFIRM",
                    JOptionPane.YES_NO_OPTION) != JOptionPane.YES_NO_OPTION) {
                return;
            }

            String currentUserID = rs.getString("userid");
            String prepSQL = "DELETE student WHERE studid = " + currentUserID;
            String prepSQL2 = "DELETE \"USER\" WHERE userid = " + currentUserID;

            int result = dbCon.executePrepared(prepSQL);
            int result2 = dbCon.executePrepared(prepSQL2);

            if (result > 0 && result2 > 0) {

                String action = "Deleted: Student with id " + txtUserID.getText().trim();
                updateLogs(action);

                javax.swing.JLabel label = new javax.swing.JLabel("Student " + currentUserID + " deleted successfully.");
                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);
                getNewData();
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error deleting user.");
        }
    }//GEN-LAST:event_btnDeleteUserActionPerformed

    void clearInputBoxes() {
        // Clear text fields
        txtFName.setText("");
        txtStanding.setText("");
        txtPassword.setText("");
        txtConfirmPassword.setText("");
        txtUserID.setText("");
        txtLName.setText("");
        txtEmail.setText("");
        txtMajor.setText("");
        txtUsername.setText("");
    }


    private void MoveNext() {
        // move result set to next record
        try {
            // TODO add your handling code here:
            clearInputBoxes();
            if (!rs.isLast()) {
                rs.next();
                populateFields();
            }
        } catch (SQLException ex) {
            //Logger.getLogger(UpdateDeleteEmployee.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void MovePrevious() {
        // move result set to next record
        try {
            // TODO add your handling code here:
            clearInputBoxes();
            if (!rs.isFirst()) {
                rs.previous();
                populateFields();
            }
        } catch (SQLException ex) {
            //Logger.getLogger(UpdateDeleteEmployee.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_btnPreviousActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteUser;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JButton btnUpdateUser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel lblConfirmPasswordError;
    private javax.swing.JLabel lblEmailError;
    private javax.swing.JLabel lblFNameError;
    private javax.swing.JLabel lblLNameError;
    private javax.swing.JLabel lblMajorError;
    private javax.swing.JLabel lblPasswordError;
    private javax.swing.JLabel lblStandingError;
    private javax.swing.JLabel lblUserIDError;
    private javax.swing.JLabel lblUsernameError;
    private javax.swing.JPasswordField txtConfirmPassword;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFName;
    private javax.swing.JTextField txtLName;
    private javax.swing.JTextField txtMajor;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtStanding;
    private javax.swing.JTextField txtUserID;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
}
