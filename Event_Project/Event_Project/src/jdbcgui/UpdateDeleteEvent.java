package jdbcgui;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

public class UpdateDeleteEvent extends javax.swing.JFrame {

    myDBCon dbCon;
    ResultSet rs;
    LoginUser luser;

    /**
     * Creates new form UpdateDeleteEvent
     */
    public UpdateDeleteEvent(LoginUser user) {
        initComponents();
        this.setLocationRelativeTo(null); // center
        luser = user;

        // set all error labels to invisible
        clearErrorLabels();

        dbCon = new myDBCon();
        getNewData();
    }

    private void getNewData() {
        try {
            rs = dbCon.executeStatement("SELECT * FROM event ORDER BY eventid ASC ");

            rs.beforeFirst();
            rs.first();
            populateFields();
        } catch (SQLException e) {
            javax.swing.JLabel label = new javax.swing.JLabel("SQL Error - Display selected events.");
            label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnNext = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnPrevious = new javax.swing.JButton();
        txtEventid = new javax.swing.JTextField();
        lblLocError = new javax.swing.JLabel();
        lblNameError = new javax.swing.JLabel();
        txtLoc = new javax.swing.JTextField();
        jLocLabel = new javax.swing.JLabel();
        jNameLabel = new javax.swing.JLabel();
        lblTimeError = new javax.swing.JLabel();
        lblEventidError = new javax.swing.JLabel();
        lblDateError = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtTime = new javax.swing.JTextField();
        jEventidLabel = new javax.swing.JLabel();
        txtDate = new javax.swing.JTextField();
        jTimeLabel = new javax.swing.JLabel();
        jDateLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Update/Delete Event");

        btnNext.setFont(new java.awt.Font("Forte", 0, 24)); // NOI18N
        btnNext.setText("Next >>");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Forte", 0, 24)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new java.awt.Font("Forte", 0, 24)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnPrevious.setFont(new java.awt.Font("Forte", 0, 24)); // NOI18N
        btnPrevious.setText("<< Previous");
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });

        txtEventid.setEditable(false);
        txtEventid.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtEventid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEventidActionPerformed(evt);
            }
        });

        lblLocError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblLocError.setForeground(new java.awt.Color(255, 0, 0));
        lblLocError.setText("error label");

        lblNameError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblNameError.setForeground(new java.awt.Color(255, 0, 0));
        lblNameError.setText("error label");

        txtLoc.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLocLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLocLabel.setText("Type:");

        jNameLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jNameLabel.setText("Name:");

        lblTimeError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblTimeError.setForeground(new java.awt.Color(255, 0, 0));
        lblTimeError.setText("error label");

        lblEventidError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblEventidError.setForeground(new java.awt.Color(255, 0, 0));
        lblEventidError.setText("error label");

        lblDateError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblDateError.setForeground(new java.awt.Color(255, 0, 0));
        lblDateError.setText("error label");

        txtName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        txtTime.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jEventidLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jEventidLabel.setText("EventID:");

        txtDate.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jTimeLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jTimeLabel.setText("Guest:");
        jTimeLabel.setToolTipText("");

        jDateLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jDateLabel.setText("Date:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(165, 165, 165)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLocLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jEventidLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jNameLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtEventid, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblEventidError, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE)
                                    .addComponent(lblNameError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtLoc, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblDateError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblLocError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtTime, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblTimeError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(btnPrevious)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnDelete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnUpdate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnNext)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jEventidLabel)
                    .addComponent(txtEventid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEventidError))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jNameLabel)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNameError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLocError)
                    .addComponent(jLocLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jDateLabel)
                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDateError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTimeLabel)
                    .addComponent(txtTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTimeError))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPrevious)
                    .addComponent(btnDelete)
                    .addComponent(btnUpdate)
                    .addComponent(btnNext))
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void populateFields() {
        try {
            txtEventid.setText(rs.getString("eventid"));
            txtName.setText(rs.getString("name"));
            txtLoc.setText(rs.getString("loc"));

            SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yy");
            txtDate.setText(dateFormat.format(rs.getDate("date")));

            txtTime.setText(rs.getString("time"));

            EnableDisableButtons();
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeleteEvent.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void MoveNext() {
        try {

            if (!rs.isLast()) {
                rs.next();
                populateFields();
            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeleteEvent.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void MovePrevious() {
        try {
            if (!rs.isFirst()) {
                rs.previous();
                populateFields();
            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeleteEvent.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void EnableDisableButtons() {
        try {
            if (rs.isFirst()) {
                btnPrevious.setEnabled(false);
            } else {
                btnPrevious.setEnabled(true);
            }
            if (rs.isLast()) {
                btnNext.setEnabled(false);
            } else {
                btnNext.setEnabled(true);
            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeleteEvent.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void updateLogs(String action) {
        try {
            String prepSQL = "INSERT INTO log VALUES (?,?,?,SYSTIMESTAMP)";
            PreparedStatement preparedStatement = dbCon.prepareStatement(prepSQL);
            preparedStatement.setInt(1, luser.userid);
            preparedStatement.setString(2, luser.username);
            preparedStatement.setString(3, action);
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error inserting the logs.");
        }
    }

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        MoveNext();
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        try {
            String stmtSQL = "SELECT eventid FROM organize WHERE eventid = " + rs.getString("eventid");
            ResultSet rs2 = dbCon.executeStatement(stmtSQL);
            if(rs2.isBeforeFirst()){
                javax.swing.JLabel label = new javax.swing.JLabel("Professor is organizing an event.");
                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
                
                rs2.close();
                return;
            }
            
            String stmtSQL2 = "SELECT eventid FROM register WHERE eventid = " + rs.getString("eventid");
            ResultSet rs3 = dbCon.executeStatement(stmtSQL2);
            if (rs3.isBeforeFirst()) {
                javax.swing.JLabel label = new javax.swing.JLabel("Student is registered in an event.");
                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);

                rs2.close();
                return;
            }
            
            // make the result set scrolable forward/backward updatable
            String prepSQL = "DELETE from event WHERE eventid = " + rs.getString("eventid");
            
            if (JOptionPane.showConfirmDialog(null, "Are you sure you want to delete?", "CONFIRM",
                    JOptionPane.YES_NO_OPTION) == JOptionPane.YES_NO_OPTION) {
                String prepSQL2 = "SELECT * from organize WHERE eventid = " + rs.getString("eventid");

                String action = "Deleted: Event table at eventID " + rs.getString("eventID");

                int result = dbCon.executePrepared(prepSQL2);

                if (result > 0) {

                    updateLogs(action);

                    javax.swing.JLabel label = new javax.swing.JLabel("Unable to delete event with professors in it.");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                result = dbCon.executePrepared(prepSQL);
                if (result > 0) {
                    javax.swing.JLabel label = new javax.swing.JLabel("Event Name " + txtName.getText().trim() + " deleted successfully.");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);
                    getNewData();
                }
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error removing event.");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    void clearErrorLabels() {
        lblEventidError.setText("");
        lblNameError.setText("");
        lblLocError.setText("");
        lblDateError.setText("");
        lblTimeError.setText("");
    }

    public boolean isInteger(String s) {
        try {
            Integer.parseInt(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }

    public static boolean isValidDate(String dateString) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yy", Locale.ENGLISH);
        dateFormat.setLenient(false); // this will not allow dates like "32-MAR-00"

        try {
            dateFormat.parse(dateString.trim());
            return true;
        } catch (ParseException pe) {
            return false;
        }
    }

    boolean isValidData() throws SQLException {
        clearErrorLabels();
        boolean result = true;

        if (txtEventid.getText().trim().isEmpty()) {
            lblEventidError.setText("Required.");
            lblEventidError.setVisible(true);
            result = false;
        } else if (!isInteger(txtEventid.getText().trim())) {
            lblEventidError.setText("Must be an integer.");
            lblEventidError.setVisible(true);
            result = false;
        } 

        if (txtName.getText().trim().isEmpty()) {
            lblNameError.setText("Required.");
            lblNameError.setVisible(true);
            result = false;
        } else if (txtName.getText().trim().length() > 30) {
            lblNameError.setText("Must be < 30 chars.");
            lblNameError.setVisible(true);
            result = false;
        }

        if (txtLoc.getText().trim().isEmpty()) {
            lblLocError.setText("Required.");
            lblLocError.setVisible(true);
            result = false;
        } else if (txtLoc.getText().trim().length() > 30) {
            lblLocError.setText("Must be < 30 chars.");
            lblLocError.setVisible(true);
            result = false;
        }

        if (txtTime.getText().trim().isEmpty()) {
            lblTimeError.setText("Required.");
            lblTimeError.setVisible(true);
            result = false;
        } else if (txtTime.getText().trim().length() > 20) {
            lblTimeError.setText("Must be < 20 chars.");
            lblTimeError.setVisible(true);
            result = false;
        }

        if (txtDate.getText().trim().isEmpty()) {
            lblDateError.setText("Required.");
            lblDateError.setVisible(true);
            result = false;
        } else if (!isValidDate(txtDate.getText().trim())) {
            lblDateError.setText("Must be in dd-MMM-yy format.");
            lblDateError.setVisible(true);
            result = false;
        }

        return result;
    }

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed

        try {

            if (isValidData()) {
                if (JOptionPane.showConfirmDialog(null, "Are you sure you want to update?", "CONFIRM",
                        JOptionPane.YES_NO_OPTION) != JOptionPane.YES_NO_OPTION) {
                    return;
                }

                String prepSQL = "UPDATE event SET name = '" + txtName.getText().trim() + "', loc = '" + txtLoc.getText().trim()
                        + "', \"Date\" = '" + txtDate.getText().trim() + "', time = '" + txtTime.getText().trim() + "' WHERE eventid = '" + txtEventid.getText().trim() + "'";

                String oldName = rs.getString("name");
                String oldLoc = rs.getString("loc");
                String oldDate = rs.getString("date");
                String oldTime = rs.getString("time");

                String action = "Updated: Event table at eventID " + txtEventid.getText().trim() + ", ";
                if (!oldName.equals(txtName.getText().trim())) {
                    action += "name(" + oldName + "->" + txtName.getText().trim() + ") ";
                }
                if (!oldLoc.equals(txtLoc.getText().trim())) {
                    action += "loc(" + oldLoc + "->" + txtLoc.getText().trim() + ") ";
                }

                if (!oldDate.equals(txtDate.getText().trim())) {
                    action += "date(" + oldDate + "->" + txtDate.getText().trim() + ") ";
                }

                if (!oldTime.equals(txtTime.getText().trim())) {
                    action += "time(" + oldTime + "->" + txtTime.getText().trim() + ") ";
                }

                int result = dbCon.executePrepared(prepSQL);

                if (result > 0) {

                    updateLogs(action);

                    javax.swing.JLabel label = new javax.swing.JLabel("Event updated successfully.");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);

                    //updateLogs(action);
                    getNewData();
                }

            } else {
                javax.swing.JLabel label = new javax.swing.JLabel("Please fix validation errors...");
                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
            }

        } catch (SQLException e) {
            //JOptionPane.showMessageDialog(null, "Error updating professor." + e.getMessage());
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
        MovePrevious();
    }//GEN-LAST:event_btnPreviousActionPerformed

    private void txtEventidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEventidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEventidActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jDateLabel;
    private javax.swing.JLabel jEventidLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLocLabel;
    private javax.swing.JLabel jNameLabel;
    private javax.swing.JLabel jTimeLabel;
    private javax.swing.JLabel lblDateError;
    private javax.swing.JLabel lblEventidError;
    private javax.swing.JLabel lblLocError;
    private javax.swing.JLabel lblNameError;
    private javax.swing.JLabel lblTimeError;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtEventid;
    private javax.swing.JTextField txtLoc;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtTime;
    // End of variables declaration//GEN-END:variables
}
