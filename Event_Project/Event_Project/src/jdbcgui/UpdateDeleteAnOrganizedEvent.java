package jdbcgui;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author wissam
 */
public class UpdateDeleteAnOrganizedEvent extends javax.swing.JFrame {

    myDBCon dbCon;
    ResultSet rs;
    ResultSet rs2;
    LoginUser luser;

    /**
     * Creates new form UpdateDeleteAnOrganizedEvent
     */
    public UpdateDeleteAnOrganizedEvent(LoginUser user) {
        initComponents();

        // center form in screen 
        this.setLocationRelativeTo(null);

        // set all error labels to invisible
        lblProfIDError.setVisible(false);
        lblEventIDError.setVisible(false);
        dbCon = new myDBCon();
        getNewData();

        luser = user;

        
        if (luser.type == 2) {
            txtProfID.setEditable(false);
            txtEventID.setEditable(false);

            btnUpdate.setEnabled(false);
            btnDelete.setEnabled(false);
            jLabel1.setText("View Organized Events");
        }
    }

    private void getNewData() {

        try {

            rs = dbCon.executeStatement("SELECT profID, eventID FROM organize ORDER BY profID ASC");

            // check if there is nothing in the result set to disable the buttons
            if (!rs.isBeforeFirst()) {
                btnNext.setEnabled(false);
                btnPrevious.setEnabled(false);
                btnDelete.setEnabled(false);
                btnUpdate.setEnabled(false);
                return;
            }

            // populate rest of fields
            rs.first();

            populateFields();
        } catch (SQLException e) {
            javax.swing.JLabel label = new javax.swing.JLabel("SQL Error - Display selected organized events.");
            label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtEventID = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        txtProfID = new javax.swing.JTextField();
        btnNext = new javax.swing.JButton();
        btnPrevious = new javax.swing.JButton();
        lblProfIDError = new javax.swing.JLabel();
        lblEventIDError = new javax.swing.JLabel();
        jLblNoOfProfessors = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Manage Organized Events");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("PROFID:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("EVENTID:");

        txtEventID.setFont(new java.awt.Font("Eras Demi ITC", 0, 18)); // NOI18N

        btnUpdate.setFont(new java.awt.Font("Forte", 0, 24)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Forte", 0, 24)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        txtProfID.setEditable(false);
        txtProfID.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        btnNext.setFont(new java.awt.Font("Forte", 0, 24)); // NOI18N
        btnNext.setText("Next >>");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnPrevious.setFont(new java.awt.Font("Forte", 0, 24)); // NOI18N
        btnPrevious.setText("<< Previous");
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });

        lblProfIDError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblProfIDError.setForeground(new java.awt.Color(255, 0, 0));
        lblProfIDError.setText("error label");

        lblEventIDError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblEventIDError.setForeground(new java.awt.Color(255, 0, 0));
        lblEventIDError.setText("error label");

        jLblNoOfProfessors.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jLblNoOfProfessors.setText("No professors manage this event");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(57, 57, 57)
                                .addComponent(btnPrevious))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(150, 150, 150)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtProfID, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                                    .addComponent(txtEventID))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblProfIDError, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblEventIDError, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnUpdate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDelete)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnNext))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(161, 161, 161)
                        .addComponent(jLblNoOfProfessors))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(jLabel1)))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtProfID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblProfIDError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(txtEventID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblEventIDError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLblNoOfProfessors)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPrevious)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete)
                    .addComponent(btnNext))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void populateFields() {
        try {

            txtProfID.setText(rs.getString("profID"));
            txtEventID.setText(rs.getString("eventID"));

            rs2 = dbCon.executeStatement("SELECT count(*) FROM organize WHERE eventID = " + rs.getString("eventID"));

            if (rs2.next()) {
                int count = rs2.getInt("count(*)");
                if (count == 1) {
                    jLblNoOfProfessors.setText(Integer.toString(count) + " professor manage this event");
                } else {
                    jLblNoOfProfessors.setText(Integer.toString(count) + " professors manage this event");
                }
            }

            EnableDisableButtons();
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeleteAnOrganizedEvent.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void MoveNext() {
        try {
            
            if (!rs.isLast()) {
                rs.next();
                populateFields();
            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeleteAnOrganizedEvent.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        MoveNext();
    }//GEN-LAST:event_btnNextActionPerformed

    private void MovePrevious() {
        try {
            
            if (!rs.isFirst()) {
                rs.previous();
                populateFields();
            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeleteAnOrganizedEvent.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void EnableDisableButtons() {
        try {
            if (rs.isFirst()) {
                btnPrevious.setEnabled(false);
            } else {
                btnPrevious.setEnabled(true);
            }
            if (rs.isLast()) {
                btnNext.setEnabled(false);
            } else {
                btnNext.setEnabled(true);
            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeleteAnOrganizedEvent.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
        MovePrevious();
    }//GEN-LAST:event_btnPreviousActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        try {
            // make the result set scrolable forward/backward updatable
            if (JOptionPane.showConfirmDialog(null, "Are you sure you want to delete?", "CONFIRM",
                    JOptionPane.YES_NO_OPTION) != JOptionPane.YES_NO_OPTION) {
                return;
            }

            String prepSQL = "DELETE organize WHERE profID = " + rs.getString("profID") + " AND eventID = " + rs.getString("eventID");

            String action = "Deleted: Organize table, row eventID(" + rs.getString("profID")
                    + "), profID(" + rs.getString("eventID") + ")";

            int result = dbCon.executePrepared(prepSQL);
            if (result > 0) {
                javax.swing.JLabel label = new javax.swing.JLabel("Organized Event deleted successfully.");
                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);

                updateLogs(action);

                getNewData();
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error deleting organized event.");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    void updateLogs(String action) {
        try {
            String prepSQL = "INSERT INTO log VALUES (?,?,?,SYSTIMESTAMP)";
            PreparedStatement preparedStatement = dbCon.prepareStatement(prepSQL);
            preparedStatement.setInt(1, luser.userid);
            preparedStatement.setString(2, luser.username);
            preparedStatement.setString(3, action);
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error inserting the logs.");
        }
    }

    void clearErrorLabels() {
        lblProfIDError.setText("");
        lblProfIDError.setVisible(false);
        lblEventIDError.setText("");
        lblEventIDError.setVisible(false);
    }

    public boolean isInteger(String s) {
        try {
            Integer.parseInt(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }

    boolean isValidEventID() throws SQLException {
        String stmtSQL = "SELECT eventID FROM event WHERE eventID = " + txtEventID.getText().trim();
        ResultSet rs2 = dbCon.executeStatement(stmtSQL);
        return rs2.isBeforeFirst();
    }

    boolean isProfessor() throws SQLException {
        String stmtSQL = "SELECT profID FROM professor WHERE profID = " + txtProfID.getText().trim();
        ResultSet rs2 = dbCon.executeStatement(stmtSQL);
        return rs2.isBeforeFirst();
    }
    
    private void setErrorMessage(JLabel label, String text) {
        label.setText(text);
        label.setVisible(true);
    }
    
    boolean isValidData() {
        clearErrorLabels();
        boolean result = true; // assume all details are true, set to false if otherwise 
        // you need to check format deails and make sure they are consistent with DB 
        try {
            if (txtProfID.getText().trim().isEmpty()) {
                setErrorMessage(lblProfIDError, "Required.");
                result = false;
            } else if (!isInteger(txtProfID.getText().trim())) {
                setErrorMessage(lblProfIDError, "Must be integer.");
                result = false;
            } else if (!isProfessor()) {
                throw new Exception();
            }
        } catch (Exception e) {
            setErrorMessage(lblProfIDError, "Invalid professor ID.");
            result = false;
        }

        try {
            if (txtEventID.getText().trim().isEmpty()) {
                setErrorMessage(lblEventIDError, "Required.");
                result = false;
            } else if (!isInteger(txtEventID.getText().trim())) {
                setErrorMessage(lblEventIDError, "Must be integer.");
                result = false;
            } else if (!isValidEventID()) {
                throw new Exception();
            }
        } catch (Exception e) {
            setErrorMessage(lblEventIDError, "Invalid event ID.");
            result = false;
        }

        return result;
    }

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        
        try {
            // make the result set scrolable forward/backward updatable

            if (isValidData()) {
                if (JOptionPane.showConfirmDialog(null, "Are you sure you want to update?", "CONFIRM",
                        JOptionPane.YES_NO_OPTION) != JOptionPane.YES_NO_OPTION) {
                    return;
                }

                String prepSQL = "UPDATE organize SET profid = ?, eventid = ? WHERE profid = ? AND eventid = ?";

                PreparedStatement preparedStatement = dbCon.prepareStatement(prepSQL);
                preparedStatement.setInt(1, Integer.parseInt(txtProfID.getText().trim()));
                preparedStatement.setInt(2, Integer.parseInt(txtEventID.getText().trim()));
                preparedStatement.setInt(3, Integer.parseInt(rs.getString("profid")));
                preparedStatement.setInt(4, Integer.parseInt(rs.getString("eventid")));

                String oldProfID = rs.getString("profid");
                String oldEventID = rs.getString("eventid");

                String action = "Updated: Organize table, ";
                if (!oldProfID.equals(txtProfID.getText().trim())) {
                    action += "profid(" + oldProfID + "->" + txtProfID.getText().trim() + ") ";
                }
                if (!oldEventID.equals(txtEventID.getText().trim())) {
                    action += "eventid(" + oldEventID + "->" + txtEventID.getText().trim() + ")";
                }

                int result = preparedStatement.executeUpdate();

                if (result > 0) {

                    javax.swing.JLabel label = new javax.swing.JLabel("Organized event updated successfully.");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);

                    updateLogs(action);

                    getNewData();
                }

            } else {
                javax.swing.JLabel label = new javax.swing.JLabel("Please fix validation errors...");
                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error updating organized event." + e.getMessage());
        }
    }//GEN-LAST:event_btnUpdateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLblNoOfProfessors;
    private javax.swing.JLabel lblEventIDError;
    private javax.swing.JLabel lblProfIDError;
    private javax.swing.JTextField txtEventID;
    private javax.swing.JTextField txtProfID;
    // End of variables declaration//GEN-END:variables
}
