/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jdbcgui;

import java.security.SecureRandom;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Locale;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author wissam
 */
public class LoginForm extends javax.swing.JFrame {

    myDBCon dbCon;
    ResultSet rs;

    /**
     * Creates new form LoginForm
     */
    public LoginForm() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.getContentPane().setBackground(new java.awt.Color(238, 242, 243));
        getRootPane().setDefaultButton(btnLogin);
        
        dbCon = new myDBCon();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtUsername = new javax.swing.JTextField();
        txtPassword = new javax.swing.JPasswordField();
        jLabel3 = new javax.swing.JLabel();
        btnLogin = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Login to Event Management System");
        setResizable(false);

        txtUsername.setBackground(new java.awt.Color(238, 242, 243));
        txtUsername.setFont(new java.awt.Font("Cascadia Code", 0, 18)); // NOI18N
        txtUsername.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Username"));
        txtUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUsernameActionPerformed(evt);
            }
        });

        txtPassword.setBackground(new java.awt.Color(238, 242, 243));
        txtPassword.setFont(new java.awt.Font("Cascadia Code", 0, 18)); // NOI18N
        txtPassword.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Password"));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel3.setText("Login to Event Management System");

        btnLogin.setFont(new java.awt.Font("Forte", 0, 24)); // NOI18N
        btnLogin.setText("Login");
        btnLogin.setFocusPainted(false);
        btnLogin.setFocusable(false);
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(181, 181, 181)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnLogin)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(70, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLogin)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static String generateRandomPassword(int length) {
        if (length < 1) throw new IllegalArgumentException();

        // Characters that are allowed in the password
        String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        String lower = upper.toLowerCase(Locale.ROOT);
        String digits = "0123456789";
        String alphanum = upper + lower + digits;
        Random random = new SecureRandom();
        
        StringBuilder sb = new StringBuilder(length);
        for (int i = 0; i < length; i++) {
            // Choose a random character from the allowed set
            int rndCharAt = random.nextInt(alphanum.length());
            char rndChar = alphanum.charAt(rndCharAt);
            
            // Append the character to the string builder
            sb.append(rndChar);
        }

        return sb.toString();
    }
    
    boolean isOldUsername(String username) throws SQLException {
        int count = 0;
        String stmtSQL = "SELECT COUNT(*) FROM old WHERE username = ?";
        PreparedStatement preparedStatement = dbCon.prepareStatement(stmtSQL);
        preparedStatement.setString(1, username); 
        rs = preparedStatement.executeQuery();
        if (rs.next()) {
            count = rs.getInt(1); // Get the count from the result set
        }
        rs.close();
        preparedStatement.close(); 
        return count > 0;
    }

    
    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        // TODO add your handling code here:
        try {

            rs = dbCon.executeStatement("SELECT userid, username, fname, password, usertype FROM \"USER\" WHERE username = '"
                    + txtUsername.getText().trim() + "' AND password = '" + txtPassword.getText().trim() + "'");

            if (rs.isBeforeFirst()) {
                rs.next();

                // create a new login user object and pass details to Menu form 

                new Thread(new Runnable() {
            @Override
            public void run() {
                // Simulate time-consuming task
                try {
                    Thread.sleep(2000); // Simulate a delay
                } catch (InterruptedException ex) {
                    ex.printStackTrace();
                }

                // After login, create and show a new frame on the EDT
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        try {
                            (new Menu(new LoginUser(rs.getInt("userid"), rs.getString("Username"),
                                    rs.getString("fname"), rs.getInt("usertype")))).setVisible(true);

                            String randomPassword = generateRandomPassword(10);
                            String message = "Your password has changed to this " + randomPassword +
                            ". If you wish to change it, go to the Users tab.";
                            String updateSQL = "UPDATE \"USER\" SET password = ? WHERE username = ?";
                            
                            boolean isOldUsername = isOldUsername(txtUsername.getText().trim());
                            
                            if (!isOldUsername){
                                // Username is not old, so we will add it to the 'old' table
                                String insertSQL = "INSERT INTO old (username) VALUES (?)";
                                try (PreparedStatement insertPstmt = dbCon.prepareStatement(insertSQL)) {
                                    insertPstmt.setString(1, txtUsername.getText().trim());
                                    insertPstmt.executeUpdate();
                                } catch (SQLException e) {
                                    // Handle any SQL errors during the insert
                                    e.printStackTrace();
                                    JOptionPane.showMessageDialog(null, "SQL Error - " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                                }
                                
                                try (PreparedStatement pstmt = dbCon.prepareStatement(updateSQL)) {
                                    // Set the parameters for the prepared statement
                                    pstmt.setString(1, randomPassword);
                                    pstmt.setString(2, txtUsername.getText().trim());

                                    // Execute the update
                                    int updatedRows = pstmt.executeUpdate();
                                    if (updatedRows > 0) {
                                        JOptionPane.showMessageDialog(null, message, "Password Changed", JOptionPane.INFORMATION_MESSAGE);

                                        //ADD USERNAME TO OLD TABLE similar to (insert into old values txtUsername.getText();)
                                        String insertSQL5 = "INSERT INTO old (username) VALUES (?)";
                                        try (PreparedStatement insertPstmt = dbCon.prepareStatement(insertSQL5)) {
                                            // Set the parameters for the prepared statement
                                            insertPstmt.setString(1, txtUsername.getText().trim());

                                            // Execute the insert
                                            insertPstmt.executeUpdate();

                                        } catch (SQLException e) {
                                            // Handle any SQL errors during the insert
                                            e.printStackTrace();
                                            JOptionPane.showMessageDialog(null, "SQL Error - " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                                        }
                                    } else {
                                        // No rows were updated; this means the username was not found
                                        JOptionPane.showMessageDialog(null, "Could not reset the password. Username not found.", "Error", JOptionPane.ERROR_MESSAGE);
                                    }
                                } catch (SQLException e) {
                                    // Handle any SQL errors
                                    e.printStackTrace();
                                    JOptionPane.showMessageDialog(null, "SQL Error - " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                                }
                            }
                            else {
                                
                            }
                        } catch (SQLException ex) {
                            Logger.getLogger(LoginForm.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                });
            }
        }).start();
                
            } else {
                javax.swing.JLabel label = new javax.swing.JLabel("Invalid username or password.");
                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) { // this is an SQL error
            javax.swing.JLabel label = new javax.swing.JLabel("SQL Error - " + e.getMessage());
            label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnLoginActionPerformed

    private void txtUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUsernameActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLogin;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
}
